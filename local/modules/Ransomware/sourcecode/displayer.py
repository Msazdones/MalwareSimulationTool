import config as cfg

def get_input(entry, seldirs, dl):
    if(cfg.os.path.isdir(entry.get()) or cfg.os.path.isfile(entry.get())):
        if(entry.get() in cfg.white_list and entry.get() not in dl):
            dl.append(entry.get())
            seldirs.config(state=cfg.tk.NORMAL)
            seldirs.insert("1.0", entry.get() + "\n")
            seldirs.config(state=cfg.tk.DISABLED)
    
    entry.delete(0, 'end')

def get_input_wl(entry, seldirs):
    if(cfg.os.path.isdir(entry.get()) or cfg.os.path.isfile(entry.get())):
        cfg.white_list.append(entry.get())
        seldirs.config(state=cfg.tk.NORMAL)
        seldirs.insert("1.0", entry.get() + "\n")
        seldirs.config(state=cfg.tk.DISABLED)
        
        write_config()

def read_config():
    f = open(cfg.config_file, "r")
    l = f.read()
    f.close()

    l = eval(cfg.re.findall("white_list=.*", l)[0].split("=")[1])

    ll = []
    for d in l:
        if(cfg.os.path.isdir(d) or cfg.os.path.isfile(d)):
            ll.append(d)

    return ll

def write_config():
    f = open(cfg.config_file, "w")
    f.write("white_list=" + str(cfg.white_list))
    f.close()

def write_log(keylog):
    keylog.config(state=cfg.tk.NORMAL)
    keylog.insert("1.0", "key: " + str(cfg.key) + "\n")
    keylog.config(state=cfg.tk.DISABLED)  

    f = open(cfg.sessionlogfile, "ab")
    f.write(cfg.key)
    f.close()

def remove_log(keylog):
    keylog.config(state=cfg.tk.NORMAL)
    keylog.delete("1.0", "2.0")
    keylog.config(state=cfg.tk.DISABLED)
    
    f = open(cfg.sessionlogfile, "rb")
    lines = f.read()
    f.close()

    if(len(lines) == 0):
        cfg.key = ""
    else:
        cfg.key = lines[len(lines)-(cfg.keysize*2): len(lines)-cfg.keysize]

    f = open(cfg.sessionlogfile, "wb")
    f.write(lines[0:len(lines)-cfg.keysize])
    f.close() 

def delete_input(seldirs, dl):
    dl.pop()
    seldirs.config(state=cfg.tk.NORMAL)
    seldirs.delete("1.0", "2.0")
    seldirs.config(state=cfg.tk.DISABLED)

def delete_input_wl(seldirs):
    cfg.white_list.pop()
    write_config()

    seldirs.config(state=cfg.tk.NORMAL)
    seldirs.delete("1.0", "2.0")
    seldirs.config(state=cfg.tk.DISABLED)

def start_enc_process(dl, root, keylog, entryperiod):
    try:
        period = float(entryperiod.get())
        if period <= 0:
            raise Exception

        while True:
            cfg.key = cfg.rsw.launch_encryption(dl)
            write_log(keylog)
            cfg.time.sleep(period)

    except:
        cfg.key = cfg.rsw.launch_encryption(dl)
        write_log(keylog)

def start_dec_process(dl, keylog):
    cfg.rsw.launch_decryption(dl, cfg.key)

    remove_log(keylog)

def display_menu():
    cfg.sessionlogfile = cfg.logdir + "key_" + cfg.datetime.today().strftime('%Y-%m-%d_%H:%M:%S') + ".log"
    f = open(cfg.sessionlogfile, "w")
    f.close()

    root = cfg.tk.Tk() 
    root.title('Ransomware test tool')

    width = root.winfo_screenwidth() 
    height = root.winfo_screenheight()
    root.geometry("%dx%d" % (width, height))

    divs = int(width / 3)

    dirlist = []

    usedkeys = ""

    #Frame 1 (Header)
    frame1 = cfg.tk.Frame(root, relief=cfg.tk.RAISED, borderwidth=1)
    
    welcome = cfg.tk.Label(frame1, text="Welcome to the Ransomware test tool", font=("Arial", 25))
    welcome.pack(padx = 20, pady = 20)

    turn_off = cfg.tk.Button(frame1, text="Exit", width = 20, command=root.quit)
    turn_off.pack(padx = 20, pady = 20)
    
    frame1.pack(side = cfg.tk.TOP, fill = cfg.tk.X)

    #Frame 2 (Left menu)
    frame2 = cfg.tk.Frame(root, width = divs, relief=cfg.tk.SUNKEN, borderwidth=1)

    enchead = cfg.tk.Label(frame2, text="Encryption configuration", font=("Arial", 18))
    enchead.pack(padx = 20, pady = 20)

    setdir = cfg.tk.Label(frame2, text="Choose the directories to encrypt:")
    setdir.pack(padx = 20, anchor = "w")

    entry = cfg.tk.Entry(frame2)
    entry.pack(padx = 20, anchor = "w", side = cfg.tk.TOP, fill = cfg.tk.X, expand=True)

    sleepperiod = cfg.tk.Label(frame2, text="Choose a sleeping period (set to 0 for just one iteration):")
    sleepperiod.pack(padx = 20, anchor = "w")

    entryperiod= cfg.tk.Entry(frame2)
    entryperiod.pack(padx = 20, anchor = "w", side = cfg.tk.TOP, fill = cfg.tk.X, expand=True)

    canvas1 = cfg.tk.Canvas(frame2, height = 25, width =25)
    canvas1.configure(scrollregion=canvas1.bbox("all"))

    scrollb1 = cfg.tk.Scrollbar(canvas1, orient='vertical')
    scrollb1.pack(side=cfg.tk.RIGHT, fill='y')

    seldirs = cfg.tk.Text(canvas1, height=25, width=25, state=cfg.tk.DISABLED, yscrollcommand=scrollb1.set)

    scrollb1.config(command=seldirs.yview)

    seldirs.pack(padx = 20, anchor = "w", fill = cfg.tk.BOTH, expand=True)

    addentry = cfg.tk.Button(frame2, text='Add target', width = 20, command=lambda: get_input(entry, seldirs, dirlist))
    addentry.pack(side = cfg.tk.TOP, padx = 20)

    rmentry = cfg.tk.Button(frame2, text='Remove target', width = 20, command=lambda: delete_input(seldirs, dirlist))
    rmentry.pack(side = cfg.tk.TOP, padx = 20, pady = 20)

    startenc = cfg.tk.Button(frame2, text='Encrypt files', width = 20, command=lambda: start_enc_process(dirlist, root, usedkeys, entryperiod))
    
    canvas1.pack(anchor = "w", fill="x", side = cfg.tk.BOTTOM, pady = 50)

    startenc.pack(side = cfg.tk.BOTTOM, padx = 20) 

    frame2.pack(side = cfg.tk.LEFT, fill = cfg.tk.BOTH, expand=True)

    #Frame 3 (Central menu)
    frame3 = cfg.tk.Frame(root, width = divs, relief=cfg.tk.SUNKEN, borderwidth=1)

    dechead = cfg.tk.Label(frame3, text="Decryption configuration", font=("Arial", 18))
    dechead.pack(padx = 20, pady = 20)
    
    decinfo = cfg.tk.Label(frame3, text="Decrypt targets with the last key from the list:")
    decinfo.pack(padx = 20, anchor = "w")

    startdec = cfg.tk.Button(frame3, text='Decrypt files', width = 20, command=lambda: start_dec_process(dirlist, usedkeys))
    startdec.pack(padx = 20, pady = 100) 

    canvas2 = cfg.tk.Canvas(frame3, height = 25, width =25)
    canvas2.configure(scrollregion=canvas2.bbox("all"))
    
    scrollb2 = cfg.tk.Scrollbar(canvas2, orient='vertical')
    scrollb2.pack(side=cfg.tk.RIGHT, fill='y')

    usedkeys = cfg.tk.Text(canvas2, height=25, width=25, state=cfg.tk.DISABLED, yscrollcommand=scrollb2.set)

    scrollb2.config(command=usedkeys.yview)

    usedkeys.pack(padx = 20, anchor = "w", fill = cfg.tk.BOTH, expand=True)

    canvas2.pack(anchor = "w", fill="x", side = cfg.tk.BOTTOM, pady = 50)
    frame3.pack(side = cfg.tk.LEFT, fill = cfg.tk.BOTH, expand=True)

    #Frame 4 (Right menu)
    frame4 = cfg.tk.Frame(root, width = divs, relief=cfg.tk.SUNKEN, borderwidth=1)

    dirhead = cfg.tk.Label(frame4, text="Target white list configuration", font=("Arial", 18))
    dirhead.pack(padx = 20, pady = 20)

    decinfo = cfg.tk.Label(frame4, text="Select the white list targets to avoid problems:")
    decinfo.pack(padx = 20, anchor = "w")

    entry2 = cfg.tk.Entry(frame4, width=25)
    entry2.pack(padx = 20, anchor = "w", fill = cfg.tk.X, expand=True)

    canvas3 = cfg.tk.Canvas(frame4, height = 25, width =25)
    canvas3.configure(scrollregion=canvas1.bbox("all"))

    scrollb3 = cfg.tk.Scrollbar(canvas3, orient='vertical')
    scrollb3.pack(side=cfg.tk.RIGHT, fill='y')

    useddirs = cfg.tk.Text(canvas3, height=25, width=25, state=cfg.tk.DISABLED, yscrollcommand=scrollb3.set)
    
    addentry2 = cfg.tk.Button(frame4, text='Add directory to WL', width = 20, command=lambda: get_input_wl(entry2, useddirs))
    addentry2.pack(side = cfg.tk.TOP, padx = 20, pady = 20)

    delentry2 = cfg.tk.Button(frame4, text='Remove last entry', width = 20, command=lambda: delete_input_wl(useddirs))
    delentry2.pack(side = cfg.tk.TOP, padx = 20, pady = 20)

    scrollb3.config(command=usedkeys.yview)

    useddirs.pack(padx = 20, anchor = "w", fill = cfg.tk.BOTH, expand=True)

    canvas3.pack(anchor = "w", fill="x", side = cfg.tk.BOTTOM, pady = 50)
    frame4.pack(side = cfg.tk.RIGHT, fill = cfg.tk.BOTH, expand=True)

    cfg.white_list = read_config()

    for e in cfg.white_list:
        useddirs.config(state=cfg.tk.NORMAL)
        useddirs.insert("1.0", e + "\n")
        useddirs.config(state=cfg.tk.DISABLED)

    root.mainloop()

def main():
    display_menu()

if __name__ == "__main__":
    main()