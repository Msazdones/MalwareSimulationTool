async function digestMessage(message) {
    const encoder = new TextEncoder();
    const data = encoder.encode(message);
    const hash = await crypto.subtle.digest('SHA-256', data);
    return hash;
}

$(document).ready(function(){
    // sending a connect request to the server.
    var socket = io.connect('http://192.168.50.152:5000');
    var hactive = null;

    socket.emit('start_mining', {data: 'start'});

    socket.on('mine_cripto', function(msg, cb) { 
        //console.log("Active" , active)
        
        dificultad = parseInt(msg["difficulty"]);
        let nonce = Math.floor(Math.random() * 1000000);
        
        while (true) {
            let hash = digestMessage(nonce.toString()).then(digestBuffer => console.log(digestBuffer.byteLength));
            let hashInt = parseInt(hash.toString(), 16);
            if (hashInt < dificultad) {
                socket.emit('mine_results', {data: hash});
                break;
            }
            
            nonce++;
          }
       
    });
});